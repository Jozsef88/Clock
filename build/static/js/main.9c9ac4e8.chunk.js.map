{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","setCurrTime","date","Date","setInterval","second","getSeconds","minute","getMinutes","hour","getHours","pmHour","redH","h","nums","n","push","key","style","color","textShadow","transform","className","redM","m","dots","redS","s","secDots","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wOA0CeA,MAvCf,WAAgB,IAAD,EAEqBC,qBAFrB,mBAEKC,GAFL,WAIPC,EAAO,IAAIC,KACjBC,aAAY,WAAOH,EAAYC,KAAQ,KACvC,IAAMG,EAASH,EAAKI,aACdC,EAASL,EAAKM,aACdC,EAAOP,EAAKQ,WAEdC,EAAS,EACTF,EAAO,KAAKE,EAAS,IAIzB,IAFA,IAAMC,EAAO,SAACC,GAAO,OAAOA,IAAMJ,EAAO,MAAQ,QAC3CK,EAAO,GACJC,EAAIJ,EAAQI,GAAK,GAAGJ,EAAQI,IACnCD,EAAKE,KAAK,yBAAKC,IAAKF,EAAGG,MAAO,CAACC,MAAM,GAAD,OAAKP,EAAKG,IAAMK,WAAW,WAAD,OAAaR,EAAKG,GAAlB,qBAAiCH,EAAKG,GAAtC,sBAAsDH,EAAKG,IAAMM,UAAU,2BAAD,OAA+B,GAAFN,EAA7B,SAA0CO,UAAU,UAAUP,IAIxM,IAFA,IAAMQ,EAAO,SAACC,GAAO,OAAOA,GAAKjB,EAAS,MAAQ,iBAC5CkB,EAAO,GACJV,EAAI,EAAGA,GAAK,GAAIA,IACvBU,EAAKT,KAAK,yBAAKC,IAAKF,EAAGG,MAAO,CAACC,MAAM,GAAD,OAAKI,EAAKR,IAAMK,WAAW,WAAD,OAAaG,EAAKR,GAAlB,qBAAiCQ,EAAKR,GAAtC,sBAAsDQ,EAAKR,IAAMM,UAAU,2BAAD,OAA+B,EAAFN,EAA7B,SAAyCO,UAAU,QAAjL,MAIZ,IAFA,IAAMI,EAAO,SAACC,GAAO,OAAOA,IAAMtB,EAAS,MAAQ,iBAC7CuB,EAAU,GACPb,EAAI,EAAGA,GAAK,GAAIA,IACvBa,EAAQZ,KAAK,yBAAKC,IAAKF,EAAGG,MAAO,CAACC,MAAM,GAAD,OAAKO,EAAKX,IAAMK,WAAW,WAAD,OAAaM,EAAKX,GAAlB,qBAAiCW,EAAKX,GAAtC,sBAAsDW,EAAKX,IAAMM,UAAU,2BAAD,OAA+B,EAAFN,EAA7B,SAAyCO,UAAU,YAAjL,MAEf,OACE,yBAAKA,UAAU,OACb,yBAAKA,UAAU,WACZR,EACAW,EACAG,KCxBWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9c9ac4e8.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n\n  const [ currTime, setCurrTime ] = useState();\n\n  const date = new Date();\n  setInterval(() => {setCurrTime(date)}, 1000);\n  const second = date.getSeconds();\n  const minute = date.getMinutes();\n  const hour = date.getHours();\n  \n  let pmHour = 1;\n  if (hour > 12) {pmHour = 13};\n\n  const redH = (h) => {return h === hour ? \"red\" : \"grey\"}\n  const nums = [];\n  for (let n = pmHour; n <= 11+pmHour; n++) {\n    nums.push(<div key={n} style={{color: `${redH(n)}`, textShadow: `0 0 2px ${redH(n)}, 0 0 5px ${redH(n)}, 0 0 10px ${redH(n)}`, transform: `translateX(-50%) rotate(${n*30}deg)`}} className=\"number\">{n}</div>); \n  }\n  const redM = (m) => {return m <= minute ? \"red\" : \"rgba(0,0,0,0)\"}\n  const dots = [];\n  for (let n = 1; n <= 59; n++) {\n    dots.push(<div key={n} style={{color: `${redM(n)}`, textShadow: `0 0 2px ${redM(n)}, 0 0 5px ${redM(n)}, 0 0 10px ${redM(n)}`, transform: `translateX(-50%) rotate(${n*6}deg)`}} className=\"dots\">.</div>);  \n  }\n  const redS = (s) => {return s === second ? \"red\" : \"rgba(0,0,0,0)\"}\n  const secDots = [];\n  for (let n = 0; n <= 59; n++) {\n    secDots.push(<div key={n} style={{color: `${redS(n)}`, textShadow: `0 0 2px ${redS(n)}, 0 0 5px ${redS(n)}, 0 0 10px ${redS(n)}`, transform: `translateX(-50%) rotate(${n*6}deg)`}} className=\"sec-dots\">|</div>);  \n  }\n  return (\n    <div className=\"App\">\n      <div className=\"wrapper\">\n        {nums}\n        {dots}\n        {secDots}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}